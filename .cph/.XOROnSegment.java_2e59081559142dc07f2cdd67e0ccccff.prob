{"name":"Local: XOROnSegment","url":"d:\\Codeforces\\XOROnSegment.java","tests":[{"id":1733651947443,"input":"import java.io.*;\nimport java.util.*;\npublic class DijkstraShortestPath {\n    static int[] a;\n    static long[] fenwickSum;\n    static int[] xorLazy;\n    public static void main(String[] args) throws IOException {\n        FastInput sc = new FastInput(System.in);\n        functi1(sc);\n    }\n    static void functi1(FastInput sc) throws IOException {\n        int n = sc.nextInt();\n        a = new int[n];\n        fenwickSum = new long[n + 1];\n        xorLazy = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            a[i] = sc.nextInt();\n            update(i + 1, a[i]);\n        }\n        int m = sc.nextInt();\n        while (m-- > 0) {\n            int t = sc.nextInt();\n            if (t == 1) {\n                int l = sc.nextInt();\n                int r = sc.nextInt();\n                System.out.println(queryRange(l, r));\n            } else {\n                int l = sc.nextInt();\n                int r = sc.nextInt();\n                int x = sc.nextInt();\n                rangeXor(l, r, x);\n            }\n        }\n    }\n    static void update(int idx, int delta) {\n        while (idx < fenwickSum.length) {\n            fenwickSum[idx] += delta;\n            idx += idx & -idx;\n        }\n    }\n    static long query(int idx) {\n        long sum = 0;\n        while (idx > 0) {\n            sum += fenwickSum[idx];\n            idx -= idx & -idx;\n        }\n        return sum;\n    }\n    static long queryRange(int l, int r) {\n        return query(r) - query(l - 1);\n    }\n    static void rangeXor(int l, int r, int x) {\n        for (int i = l; i <= r; i++) {\n            a[i - 1] ^= x;\n            update(i, x);\n        }\n    }\n}\n\nclass FastInput {\n    private BufferedReader br;\n    private StringTokenizer st;\n\n    public FastInput(InputStream in) {\n        br = new BufferedReader(new InputStreamReader(in));\n    }\n\n    public int nextInt() throws IOException {\n        while (st == null || !st.hasMoreTokens()) {\n            String str = br.readLine();\n            if (str == null || str.trim().isEmpty()) {  // Handle null or empty input\n                throw new IOException(\"Input is missing or malformed.\");\n            }\n            st = new StringTokenizer(str);\n        }\n        return Integer.parseInt(st.nextToken());\n    }\n}","output":""}],"interactive":false,"memoryLimit":1024,"timeLimit":3000,"srcPath":"d:\\Codeforces\\XOROnSegment.java","group":"local","local":true}